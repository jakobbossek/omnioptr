% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/omniopt.R
\name{omniopt}
\alias{omniopt}
\title{Omni-Optimizer}
\usage{
omniopt(
  fn,
  pop.size = 4L,
  n.gens = 100L,
  p.cross = 0.6,
  p.mut = 1/smoof::getNumberOfParameters(fn),
  eta.cross = 20L,
  eta.mut = 20L,
  mate = "normal",
  delta = 0.001,
  var.space.niching = FALSE,
  obj.space.niching = TRUE,
  init = "random",
  frequency = 1,
  seed = runif(1),
  envir = environment()
)
}
\arguments{
\item{fn}{[\code{function}]\cr
Multi-objective function of type \code{smoof_function} (see \CRANpkg{smoof}).}

\item{pop.size}{[\code{integer(1)}]\cr
Population size. Must be a multiple of 4.
The default is 4.}

\item{n.gens}{[\code{integer(1)}]\cr
The number of generations (stopping condition).
Defaults to 100.}

\item{p.cross}{[\code{numeric(1)}]\cr
Probability of crossover (within \eqn{[0.6, 1.0]}).
Defaults to 0.6.}

\item{p.mut}{[\code{numeric(1)}]\cr
Probablity of mutation (within \eqn{[0,1]}).
Default to \eqn{1/n} where \eqn{n} is the number of decision variables of
\code{fn}.}

\item{eta.cross}{[\code{integer(1)}]\cr
Value of distribution index for crossover in \eqn{\{5, \ldots, 20\}}.
Default is 20.}

\item{eta.mut}{[\code{integer(1)}]\cr
Value of distribution index for mutation in \eqn{\{5, \ldots, 50\}}.
Default is 20.}

\item{mate}{[\code{character(1)}]\cr
Choice for selection restriction. Either \dQuote{normal} for normal selection
or \dQuote{restricted} for restricted selection.}

\item{delta}{[\code{numeric(1)}]\cr
Value \eqn{\delta \in (0.0,1.0)} for loose domination.
Default is \eqn{0.001}.}

\item{var.space.niching}{[\code{logical(1)}]\cr
Use variable space niching?
Default is \code{FALSE}.
Note that at least on of \code{var.space.niching} or \code{obj.space.niching}
must be \code{TRUE}.}

\item{obj.space.niching}{[\code{logical(1)}]\cr
Use objective space niching?
Default is \code{TRUE}.
Note that at least on of \code{var.space.niching} or \code{obj.space.niching}
must be \code{TRUE}.}

\item{init}{[\code{character(1)}]\cr
This parameter determines how to initialize the  population: \dQuote{random}
(the default) for uniform random generation and \dQuote{lhs} for
Latin-Hypercube-Sampling (LHS).}

\item{frequency}{[\code{integer(1)}]\cr
Frequency with which the population information is to be stored.
Defaults to 1.}

\item{seed}{[\code{numeric(1)}]\cr
Single numeric value in \eqn{[0,1]}.
Defaults to a random number within this interval.}

\item{envir}{[\code{environment}]\cr
This parameter is required for calling R functions from C.
Do not change the default unless you know what you are doing!}
}
\value{
[\code{List}] List with the following entries:
\describe{
  \item{pareto.set}{Matrix of non-dominated points (each column is a point).}
  \item{pareto.front}{Matrix of non-dominated point objective values
  (each column is a point).}
}
}
\description{
Simple interface to the C-implementation of the Omni-optimizer
by Deb and Tiwari [1,2]. The algorithm \dQuote{is designed as a generic
multi-objective, multi-optima optimizer} [2].
}
\details{
The function expects a real-valued benchmark function from package
\CRANpkg{smoof}, the population size and the number of generations (the only
stopping condition) as mandatory arguments. Besides there are various
parameters that can be adjusted (see the referenced papers for an in-depth
explanation of the algorithms working principles).

The original C-code can be found at the
\href{http://www.coin-lab.org/content/source_codes.html}{COIN laboratory website}.
}
\examples{
\dontrun{
library(smoof)

fn = smoof::makeDTLZ1Function(dimensions = 2L, n.objectives = 2L)
fn = smoof::addLoggingWrapper(fn, logg.x = TRUE, logg.y = TRUE)

set.seed(52357) # reproducibility
res = omniopt(fn, pop.size = 20L, n.gens = 1000L)
print(res)
print(smoof::getLoggedValues(fn, compact = TRUE))
plot(t(res$pareto.front))
}
}
\references{
[1] Kalyanmoy Deb, Santosh Tiwari: Omni-optimizer: A generic evolutionary algorithm
for single and multi-objective optimization. European Journal of Operations
Research 185(3): 1062-1087.

[2] Kalyanmoy Deb, Santosh Tiwari: Omni-optimizer: A Procedure for Single and
Multi-objective Optimization. In: Proceedings of the Evolutionary Multi-Criterion
Conference (EMO) 2005: 47-61.
}
\keyword{optimize}
